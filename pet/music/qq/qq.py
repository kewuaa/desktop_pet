# -*- coding: utf-8 -*-
# @Author: kewuaa
# @Date:   2022-02-22 22:10:35
# @Last Modified by:   None
# @Last Modified time: 2022-03-04 15:58:35
from datetime import datetime
from itertools import zip_longest
import os
import time
import json
import random

from pet.music.musicer_model import SongInfo
from pet.music.musicer_model import SongUrl
from pet.music.musicer_model import SongID
from pet.music.musicer_model import BaseMusicer
from pet.music.musicer_model import CookieInvalidError


current_path, _ = os.path.split(os.path.realpath(__file__))
spare_cookie = '_qpsvr_localtk=0.4538522160856642; RK=g4zRPw2qGO; ptcz=b7a5f7280d89485721c5a14864bfc16b409647175102a691c7258f3c94ab1d4d; tvfe_boss_uuid=a6d9ec6d8f271197; pgv_pvid=6775997610; pgv_info=ssid=s4503669198; video_omgid=ddcf8ef1091f06fb; vversion_name=8.2.95; fqm_pvqid=1c9a74b8-b3c4-49c0-9256-828fb9d63049; fqm_sessionid=b13573dc-a886-44bc-a5ff-ff1853298284; ts_uid=3088992420; ptui_loginuin=1692525710; euin=oKCqow4A7KS5on**; tmeLoginType=2; pac_uid=1_692525710; iip=0; ts_refer=developer.aliyun.com/article/757367; ariaDefaultTheme=undefined; ts_last=y.qq.com/n/ryqq/search; login_type=1; psrf_musickey_createtime=1646552419; wxrefresh_token=; psrf_access_token_expiresAt=1654328419; psrf_qqrefresh_token=F2411FAA8F131C4BA3D358129EBC0196; psrf_qqaccess_token=42427D3B3BE26C71952C830186E8C9F6; qm_keyst=Q_H_L_54XXH1BpTa30Pj8UhDAyoBZm47E-FAOMModA4eDKFd0sZ49FKYVMdzA; wxopenid=; qqmusic_key=Q_H_L_54XXH1BpTa30Pj8UhDAyoBZm47E-FAOMModA4eDKFd0sZ49FKYVMdzA; wxunionid=; uin=1692525710; psrf_qqopenid=9F532E5A014BFC5DAADB28383F71273F; qm_keyst=Q_H_L_54XXH1BpTa30Pj8UhDAyoBZm47E-FAOMModA4eDKFd0sZ49FKYVMdzA; psrf_qqunionid=6E77AFE5B790D79310DFADC9A96A2C92'
SIGN_JS = ''


def ve(e, t):
    (n := list(str(e))).reverse()
    (a := list(str(t))).reverse()
    r = [0] * (len(n) + len(a))
    for l, al in enumerate(a):
        for u, nu in enumerate(n):
            r[l + u] += int(al) * int(nu)
            r[l + u + 1] += int(r[l + u] / 10)
            r[l + u] %= 10
    r.reverse()
    r[0] or r.pop(0)
    return ''.join(str(i) for i in r)


def ye(e, t):
    nn = []
    (n := list(str(e))).reverse()
    (a := list(str(t))).reverse()
    i = 0
    for nu, au in zip_longest(n, a, fillvalue=0):
        l = round(int(nu)) + round(int(au)) + i
        nn.append(str(l % 10))
        i = 1 if l >= 10 else 0
    i == 1 and nn.append('1')
    nn.reverse()
    return ''.join(nn)


def get_time():
    t = datetime.now()
    return (
        (t.hour * 60 + t.minute) * 60 + t.second) * 1000 + t.microsecond // 1000


def Ee(e):
    t = ve(e, '18014398509481984')  # '54043195528445952'
    n = ve(round(random.random() * 4194304), '4294967296')
    r = get_time()
    return ye(ye(t, n), r)


class Musicer(BaseMusicer):
    """docstring for Musicer."""

    SEARCH_URL = 'https://u.y.qq.com/cgi-bin/musics.fcg?_=%s&sign=%s'
    SEARCH_DATA = {
##        "comm": {
##            "cv": 4747474,
##            "ct": 24,
##            "format": "json",
##            "inCharset": "utf-8",
##            "outCharset": "utf-8",
##            "notice": 0,
##            "platform": "yqq.json",
##            "needNewCode": 1,
##            "uin": 1692525710,
##            "g_tk_new_20200303": 1252795051,
##            "g_tk": 1252795051
##        },
        "req_1": {
            "method": "DoSearchForQQMusicDesktop",
            "module": "music.search.SearchCgiService",
            "param": {
                "remoteplace": "txt.yqq.center",
                "searchid": "",
                "search_type": 0,
                "query": "",
                "page_num": 1,
                "num_per_page": 10,
            },
        },
    }
    SONG_URL = 'https://u.y.qq.com/cgi-bin/musics.fcg?_=%s&sign=%s'
    URL_DATA = {
        "req_7":{
            "module":"vkey.GetVkeyServer",
            "method":"CgiGetVkey",
            "param":{
                "guid":"9000858194",
                "songmid":[
                    ""
                ],
                "songtype":[
                    0
                ],
                "uin":"1692525710",
                "loginflag":1,
                "platform":"20"
            }
        }
    }

    def __init__(self):
        super(Musicer, self).__init__(
            current_path=current_path, js=SIGN_JS)
        self.headers['cookie'] = spare_cookie
        self.headers['referer'] = 'https://y.qq.com/'
        self.js_name = self._get_random_name()

    async def _get_song_info(self, song):
        time_stamp = int(time.time() * 1000)
        self.SEARCH_DATA['req_1']['param']['searchid'] = Ee(3)
        self.SEARCH_DATA['req_1']['param']['query'] = song
        self._set_random_ua()
        _data = json.dumps(self.SEARCH_DATA, ensure_ascii=False)
        data = json.dumps(_data, ensure_ascii=False)
##        print(data)
        path = await self.load_js(self.js_name)
        res = await self.session.post(
            self.SEARCH_URL % (
                time_stamp, await self._run_js(path, data)),
            headers=self.headers,
            data=_data)
        assert (status := res.status), f'response: {status}'
        result_dict = await res.json(content_type=None)
        if (result_dict := result_dict['req_1'])['code'] != 0:
            raise CookieInvalidError
        songs = result_dict['data']['body']['song']['list']
        return [SongInfo(f'QQ: {song["name"]}-->{song["singer"][0]["name"]}-->《{song["album"]["name"]}》',
                         SongID((str(song['mid']),), 'qq'))
                for song in songs]

    async def _get_song_url(self, _id):
        time_stamp = int(time.time() * 1000)
        self.URL_DATA['req_7']['param']['songmid'][0] = _id
        self._set_random_ua()
        _data = json.dumps(self.URL_DATA, ensure_ascii=False)
        data = json.dumps(_data, ensure_ascii=False)
        path = await self.load_js(self.js_name)
        res = await self.session.post(
            self.SONG_URL % (time_stamp, await self._run_js(path, data)),
            headers=self.headers,
            data=_data)
        assert (status := res.status) == 200, f'response: {status}'
        result_dict = await res.json(content_type=None)
        if (result_dict := result_dict['req_7'])['code'] != 0:
            raise CookieInvalidError
        url = 'https://dl.stream.qqmusic.qq.com/' + result_dict['data']['midurlinfo'][0]['purl']
        return SongUrl(url)

    async def close(self):
        await super(Musicer, self).close()
        os.remove(await self.load_js(self.js_name))
